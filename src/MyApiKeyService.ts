import { createApiKeyService } from "zudoku/plugins/api-keys";

// Determine backend URL based on environment
const getBackendUrl = () => {
  if (typeof window === 'undefined') {
    return 'http://localhost:3001';
  }
  return window.location.hostname === 'localhost' 
    ? 'http://localhost:3001' 
    : window.location.origin;
};

interface WorkspaceCredentials {
  clientId: string;
  clientSecret: string;
  workspace: string;
  tokenUrl: string;
  apiBaseUrl: string;
  flowIds: {
    nerv: string;
    recurring: string;
  };
}

/**
 * Fetch workspace credentials from backend API
 * This retrieves the user's workspace-specific OAuth2 credentials
 */
async function fetchWorkspaceCredentials(context: any): Promise<WorkspaceCredentials | null> {
  try {
    // Get Clerk token from context
    const token = await context.authentication?.getAccessToken?.();

    if (!token) {
      console.warn('No Clerk token available');
      return null;
    }

    const response = await fetch(`${getBackendUrl()}/api/workspace/credentials`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error('Failed to fetch workspace credentials:', response.statusText);
      return null;
    }

    const credentials = await response.json();
    return credentials;
  } catch (error) {
    console.error('Error fetching workspace credentials:', error);
    return null;
  }
}

/**
 * Workspace-aware API Key Service
 *
 * This service fetches the user's workspace-specific OAuth2 credentials
 * and displays them in the /settings/api-keys page.
 *
 * Flow:
 * 1. User logs in with Clerk (workspace is in JWT metadata)
 * 2. Service fetches credentials from backend based on workspace
 * 3. Backend returns workspace-specific CLIENT_ID, CLIENT_SECRET, FLOW_IDs
 * 4. Credentials are displayed to the user (they don't need to input anything)
 * 5. These credentials are auto-used when testing APIs
 */
export const MyApiKeyService = createApiKeyService({
  /**
   * Get consumers (workspace credentials)
   * Returns the user's workspace-specific OAuth2 credentials
   */
  getConsumers: async (context) => {
    const credentials = await fetchWorkspaceCredentials(context);

    if (!credentials) {
      // Return empty array if no credentials found
      // This happens when user is not authenticated or backend is down
      return [];
    }

    const now = new Date();
    const ninetyDaysFromNow = new Date(now);
    ninetyDaysFromNow.setDate(now.getDate() + 90);

    // Return credentials as "API Keys" for display
    return [
      {
        id: `workspace-${credentials.workspace}`,
        label: `${credentials.workspace} Workspace`,
        apiKeys: [
          {
            id: `client-id-${credentials.workspace}`,
            description: "OAuth2 Client ID",
            key: credentials.clientId,
            createdOn: now.toISOString(),
          },
          {
            id: `client-secret-${credentials.workspace}`,
            description: "OAuth2 Client Secret",
            key: credentials.clientSecret,
            createdOn: now.toISOString(),
          },
          {
            id: `nerv-flow-${credentials.workspace}`,
            description: "Nerv Flow ID (One-time)",
            key: credentials.flowIds.nerv,
            createdOn: now.toISOString(),
          },
          {
            id: `recurring-flow-${credentials.workspace}`,
            description: "Recurring Flow ID",
            key: credentials.flowIds.recurring,
            createdOn: now.toISOString(),
          },
        ],
        createdOn: now.toISOString(),
        expiresOn: ninetyDaysFromNow.toISOString(),
      },
    ];
  },

  /**
   * https://github.com/zuplo/zudoku/blob/main/examples/api-key-service/src/MyApiKeyService.ts
   * Create key - Not applicable for workspace credentials
   * Workspace credentials are managed by administrators, not end users
   */
  createKey: async ({ apiKey }) => {
    throw new Error('Workspace credentials cannot be created by users. Contact your administrator.');
  },

  /**
   * Delete key - Not applicable for workspace credentials
   */
  deleteKey: async (consumerId, keyId, _context) => {
    throw new Error('Workspace credentials cannot be deleted by users. Contact your administrator.');
  },

  /**
   * Roll key - Not applicable for workspace credentials
   */
  rollKey: async (consumerId, _context) => {
    throw new Error('Workspace credentials cannot be regenerated by users. Contact your administrator.');
  },

  /**
   * Update consumer - Not applicable for workspace credentials
   */
  updateConsumer: async (consumer, context) => {
    throw new Error('Workspace credentials cannot be updated by users. Contact your administrator.');
  },
});
